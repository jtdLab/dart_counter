{
	"Page Test": {
		"prefix": "pt",
		"body": [
		 "void main() {",
		 "  group('${TM_FILENAME_BASE/(.)(.*)(_test)/${1:/upcase}${2:/camelcase}/}', () {",
		 "    // Dependencies",
		 "",
		 "    setUp(() {",
		 "      // Init dependencies",
		 "",
		 "      // Mock default behaviour",
		 "",
		 "    });",
		 "",
		 "    // Returns the widget under test wrapped into a testable environment",
		 "    // that provides all dependencies needed.",
		 "    Widget wrappedUnderTest({Locale? locale}) {",
		 "      return appWrapper(",
		 "        MultiProvider(",
		 "          providers: [",
		 "            ",
		 "          ],",
		 "          child: const ${TM_FILENAME_BASE/(.)(.*)(_test)/${1:/upcase}${2:/camelcase}/}(),",
		 "        ),",
		 "        locale: locale",
		 "      );",
		 "    }",
		 "",
		 "    $0",
		 "",
		 "  });",
		 "}",
		],
		"description": "Page Test"
	  }, 
	  "Page Test Wrapped Under Test": {
		"prefix": "ptwut",
		"body": [
		 "// Returns the widget under test wrapped into a testable environment",
		 "// that provides all dependencies needed.",
		 "Widget wrappedUnderTest({Locale? locale}) {",
		 "  return appWrapper(",
		 "    MultiProvider(",
		 "      providers: [",
		 "        ",
		 "      ],",
		 "      child: const ${TM_FILENAME_BASE/(.)(.*)(_test)/${1:/upcase}${2:/camelcase}/}(),",
		 "    ),",
		 "    locale: locale",
		 "  );",
		 "}",
		],
		"description": "Page Test Wrapped Under Test"
	  }, 
	  "Page Test Injects Group": {
		"prefix": "ptig",
		"body": [
		 "group('Injects', () {",
		 "  setUp(() {",
		 "    // Register dependency in DI-container",
		 "    getIt.registerSingleton<${1:type}>(${2:instance});",
		 "    $0",
		 "  });",
		 "",
		 "  tearDown(() async {",
		 "    // Reset DI-container",
		 "    await getIt.reset();",
		 "  });",
		 "",
		 "  // Returns the widget under test wrapped into a testable environment",
		 "  // that provides all dependencies needed.",
		 "  Widget wrappedUnderTest() {",
		 "    appWrapper(",
		 "      return Builder(",
		 "        builder: (context) => const ${TM_FILENAME_BASE/(.)(.*)(_test)/${1:/upcase}${2:/camelcase}/}().wrappedRoute(context),",
		 "      ),",
		 "    );",
		 "  }",
		 "",
		 "  testWidgets(",
		 "    'the instance of ${1} that is registered inside DI-container '",
		 "    'into the widget tree.',",
		 "    (tester) async {",
		 "      // Act",
		 "      await tester.pumpWidget(wrappedUnderTest());",
		 "      tester.takeException();",
		 "",
		 "      // Assert",
		 "      final context = tester.element(find.byType(${TM_FILENAME_BASE/(.)(.*)(_test)/${1:/upcase}${2:/camelcase}/}));",
		 "      expect(context.read<$1>(), $2);",
		 "    },",
		 "  );",
		 "});",
		],
		"description": "Page Test Injects Group"
	  }, 
	  "Page Test Injects Register Dependency": {
		"prefix": "ptird",
		"body": [
		 "getIt.registerSingleton<${1:type}>($0$1);"
		],
		"description": "Page Test Injects Register Dependency"
	  }, 
	  "Page Test Injects Test": {
		"prefix": "ptit",
		"body": [
		 "testWidgets(",
		 "  'the instance of ${1:bloc} that is registered inside DI-container '",
		 "  'into the widget tree.',",
		 "  (tester) async {",
		 "    // Act",
		 "    await tester.pumpWidget(wrappedUnderTest());",
		 "    tester.takeException();",
		 "",
		 "    // Assert",
		 "    final context = tester.element(find.byType(${TM_FILENAME_BASE/(.)(.*)(_test)/${1:/upcase}${2:/camelcase}/}));",
		 "    expect(context.read<${1:bloc}>(), ${0:instance});",
		 "  },",
		 ");",
		],
		"description": "Page Test Injects Test"
	  }, 
	  "Page Test Bloc Group": {
		"prefix": "ptbg",
		"body": [
		 "group('GIVEN state of ${1:bloc} is', () {",
		 "  group('${2:state}', () {",
		 "    $0",
		 "  });",
		 "});",
		],
		"description": "Page Test Bloc Group"
	  }, 
	  "Page Test Bloc Group Setup": {
		"prefix": "ptbgs",
		"body": [
		  "setUp(() {",
		  "  // Mock bloc state",
		  "  whenListenTo(${1:bloc}, ${0:state});",
		  "});",
		],
		"description": "Page Test Bloc Group Setup"
	  },
	  "Page Test Param Group": {
		"prefix": "ptpg",
		"body": [
		 "group('with ${1:param} = ${2:value}', () {",
		 "  setUp(() {",
		 "    // Mock bloc state",
		 "    whenListenTo(${3:bloc}, ${4:state});",
		 "  });",
		 "",
		 "  $0",
		 "});",
		],
		"description": "Page Test Param Group"
	  }, 
	  // TODO instance in desc could be same as in code
	  "Page Test Bloc Test Calls": {
		"prefix": "ptbtc",
		"body": [
		  "testWidgets('THEN calls ${1:method} method of ${2:instance} with ${3:params}.', (tester) async {",
		  "  // Arrange",
		  "  when(() => ${4:instance}.${5:method}($6)).${7|thenReturn(),thenAnswer((_) async => ),thenAnswer((_) => )|};",
		  "",
		  "  // Act",
		  "  await tester.pumpWidget(wrappedUnderTest());",
		  "",
		  "  // Assert",
		  "  verify(() => ${4:instance}.${5:method}($6)).called(1);",
		  "});",
		],
		"description": "Page Test Bloc Test Calls"
	  }, 
	  "Page Test Bloc Test Calls Localized": {
		"prefix": "ptbtcl",
		"body": [
		  "testWidgetsLocalized('THEN calls ${1:method} method of ${2:instance} with ${3:params}.',",
		  "  (tester, locale, expectedTranslation) async {",
		  "    // Arrange",
		  "    when(() => ${4:instance}.${5:method}(${6:expectedTranslation})).${7|thenReturn(),thenAnswer((_) async => ),thenAnswer((_) => )|};",
		  "",
		  "    // Act",
		  "    await tester.pumpWidget(wrappedUnderTest(locale:locale));",
		  "",
		  "    // Assert",
		  "    verify(() => ${4:instance}.${5:method}(${6:expectedTranslation})).called(1);",
		  "  },",
		  "  expectedTranslations: ExpectedTranslations(",
		  "    en: '$8',",
		  "    de: '$9',",
		  "  ),",
		  ");",
		],
		"description": "Page Test Bloc Test Calls Localized"
	  }, 
	  "Page Test Bloc Test Never Calls": {
		"prefix": "ptbtnc",
		"body": [
		 "testWidgets('THEN never calls ${1:method} method of ${2:instance} with ${3:params}.', (tester) async {",
		 "  // Arrange",
		 "  when(() => ${4:instance}.${5:method}($6)).${7|thenReturn(),thenAnswer((_) async => ),thenAnswer((_) => )|};",
		 "",
		 "  // Act",
		 "  await tester.pumpWidget(wrappedUnderTest());",
		 "",
		 "  // Assert",
		 "  verifyNever(() => ${4:instance}.${5:method}($6));",
		 "});",
		],
		"description": "Page Test Bloc Test Never Calls"
	  }, 
	  // ${TM_FILENAME_BASE/(.)(.*)(_page.*)/${1:/upcase}${2:/camelcase}/} -> my_page_test -> My
	  "Page Test Renders View": {
		"prefix": "ptrv",
		"body": [
		 "testWidgets('Renders ${TM_FILENAME_BASE/(.)(.*)(_page.*)/${1:/upcase}${2:/camelcase}/}View.', (tester) async {",
		 "  // Act",
		 "  await tester.pumpWidget(wrappedUnderTest());",
		 "",
		 "  // Assert",
		 "  expect(find.byType(${TM_FILENAME_BASE/(.)(.*)(_page.*)/${1:/upcase}${2:/camelcase}/}View), findsOneWidget);",
		 "});",
		],
		"description": "Page Test Renders View"
	  }, 
}